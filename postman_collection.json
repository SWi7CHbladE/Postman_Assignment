{
  "info": {
    "name": "Flask API Practice Collection (Advanced)",
    "_postman_id": "c9c7b3a0-0000-4a11-b000-111111111111",
    "description": "Complete collection with basic + advanced tests matching the updated Flask server.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Login",
      "request": {
        "method": "POST",
        "header": [],
        "url": "{{base_url}}/login"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
              "const res = pm.response.json();",
              "pm.expect(res).to.have.property('token');",
              "pm.expect(res).to.have.property('expires_in');",
              "pm.environment.set('authToken', res.token);",
              "pm.environment.set('tokenExpiry', Date.now() + res.expires_in * 1000);",
              "pm.test(\"Response time < 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));",
              "postman.setNextRequest('Protected');"
            ]
          }
        }
      ]
    },
    {
      "name": "Protected (Status code and response time)",
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{authToken}}", "type": "text" }
        ],
        "url": "{{base_url}}/protected"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
              "pm.test(\"Response time < 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));",
              "postman.setNextRequest('Register');"
            ]
          }
        }
      ]
    },
    {
      "name": "Register",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\"\n}"
        },
        "url": "{{base_url}}/register"
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.environment.set('username', 'user_' + Date.now());",
              "pm.environment.set('email', 'test' + Math.floor(Math.random()*100000) + '@mail.com');"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const res = pm.response.json();",
              "// Schema checks",
              "pm.test('has id (number)', () => pm.expect(res.id).to.be.a('number'));",
              "pm.test('username echoed', () => pm.expect(res.username).to.eql(pm.environment.get('username')));",
              "pm.test('email echoed & contains @', () => pm.expect(res.email).to.include('@'));",
              "pm.test('createdAt is ISO date', () => pm.expect(new Date(res.createdAt).toString()).to.not.eql('Invalid Date'));",
              "postman.setNextRequest('User');"
            ]
          }
        }
      ]
    },
    {
      "name": "User (Schema Validation)",
      "request": { "method": "GET", "url": "{{base_url}}/user/101" },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const res = pm.response.json();",
              "// Schema validation",
              "pm.test('id is number', () => pm.expect(res.id).to.be.a('number'));",
              "pm.test('email contains @', () => pm.expect(res.email).to.include('@'));",
              "pm.test('roles is non-empty array', () => pm.expect(res.roles).to.be.an('array').that.is.not.empty);",
              "postman.setNextRequest('Users/1');"
            ]
          }
        }
      ]
    },
    {
      "name": "Users/1 (Values Comparision Across Requests p1)",
      "request": { "method": "GET", "url": "{{base_url}}/users/1" },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const res = pm.response.json();",
              "pm.environment.set('company1', res.company.name);",
              "pm.test('User1 has company name', () => pm.expect(res.company.name).to.exist);",
              "postman.setNextRequest('Users/2');"
            ]
          }
        }
      ]
    },
    {
      "name": "Users/2 (Values Comparision Across Requests p2)",
      "request": { "method": "GET", "url": "{{base_url}}/users/2" },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const res = pm.response.json();",
              "pm.test('Same company as user1', () => pm.expect(res.company.name).to.eql(pm.environment.get('company1')));",
              "postman.setNextRequest('Book');"
            ]
          }
        }
      ]
    },
    {
      "name": "Book",
      "request": { "method": "GET", "url": "{{base_url}}/book/123" },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const res = pm.response.json();",
              "pm.test('id is number', () => pm.expect(res.id).to.be.a('number'));",
              "pm.test('title is string', () => pm.expect(res.title).to.be.a('string'));",
              "pm.test('authors non-empty array', () => pm.expect(res.authors).to.be.an('array').that.is.not.empty);",
              "pm.test('published is boolean', () => pm.expect(res.published).to.be.a('boolean'));",
              "pm.test('Response time < 500ms', () => pm.expect(pm.response.responseTime).to.be.below(500));",
              "postman.setNextRequest('Items (Paginate)');"
            ]
          }
        }
      ]
    },
    {
      "name": "Items (Paginate)",
      "request": { "method": "GET", "url": "{{base_url}}/items?page={{nextPage}}" },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// initialize on first run",
              "if (!pm.environment.get('nextPage')) {",
              "  pm.environment.set('nextPage', 1);",
              "  pm.environment.set('allItems', '[]');",
              "}"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const res = pm.response.json();",
              "pm.test('items is array', () => pm.expect(res.items).to.be.an('array'));",
              "let all = JSON.parse(pm.environment.get('allItems'));",
              "all = all.concat(res.items);",
              "pm.environment.set('allItems', JSON.stringify(all));",
              "",
              "if (res.nextPage) {",
              "  pm.environment.set('nextPage', res.nextPage);",
              "  postman.setNextRequest('Items (Paginate)');",
              "} else {",
              "  pm.test('Collected 20 items across pages', () => pm.expect(all.length).to.eql(20));",
              "  pm.environment.unset('allItems');",
              "  pm.environment.unset('nextPage');",
              "  postman.setNextRequest('Unstable (Retry up to 3)');",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "Unstable (Retry up to 3)",
      "request": { "method": "GET", "url": "{{base_url}}/unstable" },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "if (pm.response.code === 500) {",
              "  let r = parseInt(pm.environment.get('retries') || '0', 10) + 1;",
              "  if (r <= 3) {",
              "    pm.environment.set('retries', String(r));",
              "    postman.setNextRequest('Unstable (Retry up to 3)');",
              "  } else {",
              "    pm.test('Max retries reached', () => pm.expect.fail('Gave up after 3 retries'));",
              "    pm.environment.unset('retries');",
              "    postman.setNextRequest('Event');",
              "  }",
              "} else {",
              "  pm.environment.unset('retries');",
              "  pm.test('Succeeded after optional retries', () => pm.expect(pm.response.code).to.eql(200));",
              "  postman.setNextRequest('Event');",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "Event (Date)",
      "request": { "method": "GET", "url": "{{base_url}}/event" },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const ev = pm.response.json();",
              "const s = new Date(ev.start), e = new Date(ev.end);",
              "pm.test('start is valid date', () => pm.expect(s.toString()).to.not.eql('Invalid Date'));",
              "pm.test('end > start', () => pm.expect(e.getTime()).to.be.above(s.getTime()));",
              "postman.setNextRequest('Order');"
            ]
          }
        }
      ]
    },
    {
      "name": "Order",
      "request": { "method": "GET", "url": "{{base_url}}/order/1001" },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const o = pm.response.json();",
              "pm.test('amount > 0', () => pm.expect(o.amount).to.be.above(0));",
              "pm.test('currency is USD', () => pm.expect(o.currency).to.eql('USD'));",
              "pm.test('status is confirmed or pending', () => pm.expect(['confirmed','pending']).to.include(o.status));",
              "postman.setNextRequest('Sorted Users');"
            ]
          }
        }
      ]
    },
    {
      "name": "Sorted Users",
      "request": { "method": "GET", "url": "{{base_url}}/sorted-users" },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const res = pm.response.json();",
              "pm.test('users array exists', () => pm.expect(res.users).to.be.an('array').that.is.not.empty);",
              "const ids = res.users.map(u => u.id);",
              "pm.test('IDs sorted descending', () => pm.expect(ids).to.eql([...ids].sort((a,b)=>b-a)));",
              "pm.test('Response time < 500ms', () => pm.expect(pm.response.responseTime).to.be.below(500));",
              "postman.setNextRequest(null);"
            ]
          }
        }
      ]
    },
    {
      "name": "Simulate Token Expiry (then auto-refresh)",
      "request": { "method": "GET", "url": "{{base_url}}/event" },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Force expiry & clear token to simulate an expired/invalid token",
              "pm.environment.set('tokenExpiry', Date.now() - 1000);",
              "pm.environment.unset('authToken');",
              "// Tell Protected to stop after verifying the auto-refresh worked",
              "pm.environment.set('stop_after_protected', '1');"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Simulated expiry set', () => pm.expect(parseInt(pm.environment.get('tokenExpiry'), 10)).to.be.below(Date.now()));",
              "postman.setNextRequest('Auth: Ensure Token (branch to Login or Protected)');"
            ]
          }
        }
      ]
    }
  ],
  "protocolProfileBehavior": {}
}